class LeafletTileLayer {
  static async init() {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã
    CONFIG.Canvas.layers.leafletTiles = {
      group: "interface",
      layerClass: LeafletTileLayer,
    };
  }

  constructor() {
    this.map = null;
    this.tileLayer = null;
  }

  async draw() {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Leaflet
    const div = document.createElement("div");
    div.id = "leaflet-map";
    div.style.width = "100%";
    div.style.height = "100%";

    canvas.grid.background = div;
    canvas.grid.grid = div;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Leaflet
    this.map = L.map("leaflet-map", {
      crs: L.CRS.Simple,
      minZoom: 3,
      maxZoom: 8,
      attributionControl: false,
    });

    // –í–∫–ª—é—á–µ–Ω–∏–µ –∑—É–º–∞ –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
    this.map.scrollWheelZoom.enable();

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∑—É–º–∞
    L.control
      .zoom({
        position: "topright",
      })
      .addTo(this.map);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–ª–æ–≤
    this.tileLayer = L.tileLayer(
      "modules/leaflet-tiles/tiles/{z}/{x}/{y}.webp",
      {
        tileSize: 512,
        noWrap: true,
      }
    ).addTo(this.map);

    // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
    const bounds = [
      [0, 0],
      [canvas.dimensions.height, canvas.dimensions.width],
    ];
    this.map.fitBounds(bounds);

    this.map.on("moveend", () => {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      const center = this.map.getCenter();
      game.socket.emit("module.leaflet-tiles", {
        action: "move",
        data: {
          lat: center.lat,
          lng: center.lng,
        },
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –æ—Ç –∏–≥—Ä–æ–∫–æ–≤
    game.socket.on("module.leaflet-tiles", (data) => {
      if (data.action === "move") {
        this.map.panTo([data.data.lat, data.data.lng]);
      }
    });

    // –ü—Ä–∏–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X=1000px, Y=500px)
    const marker = L.marker([500, 1000], {
      icon: L.divIcon({
        className: "custom-marker",
        html: '<div class="map-pin">üè∞</div>', // –≠–º–æ–¥–∑–∏ –∏–ª–∏ HTML
        iconSize: [30, 30],
      }),
    }).addTo(this.map);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä—É
    marker.on("click", () => {
      // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
      marker.bindPopup("–°—Ç–æ–ª–∏—Ü–∞ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –≠–ª—å–¥–∞—Ä–∏—è").openPopup();

      // –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–∫—Ä–æ—Å Foundry
      game.macros.getName("Open City Journal").execute();
    });
  }
}

// –•—É–∫–∏ Foundry
Hooks.once("init", () => {
  LeafletTileLayer.init();
});

Hooks.on("canvasInit", () => {
  new LeafletTileLayer().draw();
});
